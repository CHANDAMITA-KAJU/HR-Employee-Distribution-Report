CREATE DATABASE dannys_diner;

USE dannys_diner;

CREATE TABLE sales(
	customer_id VARCHAR(1),
	order_date DATE,
	product_id INTEGER
);

INSERT INTO sales
	(customer_id, order_date, product_id)
VALUES
	('A', '2021-01-01', 1),
	('A', '2021-01-01', 2),
	('A', '2021-01-07', 2),
	('A', '2021-01-10', 3),
	('A', '2021-01-11', 3),
	('A', '2021-01-11', 3),
	('B', '2021-01-01', 2),
	('B', '2021-01-02', 2),
	('B', '2021-01-04', 1),
	('B', '2021-01-11', 1),
	('B', '2021-01-16', 3),
	('B', '2021-02-01', 3),
	('C', '2021-01-01', 3),
	('C', '2021-01-01', 3),
	('C', '2021-01-07', 3);

CREATE TABLE menu(
	product_id INTEGER,
	product_name VARCHAR(5),
	price INTEGER
);

INSERT INTO menu
	(product_id, product_name, price)
VALUES
	(1, 'sushi', 10),
    (2, 'curry', 15),
    (3, 'ramen', 12);

CREATE TABLE members(
	customer_id VARCHAR(1),
	join_date DATE
);

-- Still works without specifying the column names explicitly
INSERT INTO members
	(customer_id, join_date)
VALUES
	('A', '2021-01-07'),
    ('B', '2021-01-09');

SELECT * FROM MEMBERS;
SELECT * FROM MENU;
SELECT * FROM SALES;

SET SQL_SAFE_UPDATES=0;
SET SQL_MODE=" ";

#1. What is the total amount each customer spent at the restaurant?

SELECT C.CUSTOMER_ID, SUM(M.PRICE) AS Total_Price
FROM SALES AS C
INNER JOIN MENU AS M
ON C.PRODUCT_ID= M.PRODUCT_ID
GROUP BY C.CUSTOMER_ID;



#2. How many days has each customer visited the restaurant?

SELECT customer_id, count(distinct(order_date)) as days FROM SALES
GROUP BY customer_id;


#3. What was the first item from the menu purchased by each customer?

with first_item_table As(
SELECT S.CUSTOMER_ID, MIN(S.ORDER_DATE) AS FIRST_ORDER_DATE FROM SALES AS S
GROUP BY S.CUSTOMER_ID
)
SELECT FIT.CUSTOMER_ID, M.PRODUCT_NAME
FROM first_item_table AS FIT
JOIN SALES AS S
ON
S.CUSTOMER_ID=FIT.CUSTOMER_ID AND S.ORDER_DATE=FIT.FIRST_ORDER_DATE
JOIN MENU AS M
ON
S.PRODUCT_ID=M.PRODUCT_ID;

SELECT S.CUSTOMER_ID, M.PRODUCT_NAME
FROM SALES AS S
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID
JOIN (
      SELECT CUSTOMER_ID, MIN(ORDER_DATE) AS FIRST_ORDER
	  FROM SALES AS S
	  GROUP BY CUSTOMER_ID) AS MIN_ORDER
ON S.CUSTOMER_ID=MIN_ORDER.CUSTOMER_ID AND S.ORDER_DATE=MIN_ORDER.FIRST_ORDER;


#4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT M.PRODUCT_NAME, COUNT(S.PRODUCT_ID) AS MAX_ORDER FROM SALES AS S
JOIN MENU AS M
ON 
S.PRODUCT_ID=M.PRODUCT_ID
GROUP BY M.PRODUCT_NAME
ORDER BY COUNT(S.PRODUCT_ID) DESC
LIMIT 1;

#5. Which item was the most popular for each customer?


SELECT CUSTOMER_ID, PRODUCT_NAME FROM
(
SELECT S.CUSTOMER_ID, M.PRODUCT_NAME, COUNT(*) AS PURCHASE_COUNT,
DENSE_RANK() OVER(PARTITION BY S.CUSTOMER_ID ORDER BY COUNT(*) DESC) AS RANKS FROM SALES AS S
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID
GROUP BY S.CUSTOMER_ID, M.PRODUCT_NAME
) AS SUBQUERY
WHERE RANKS=1;

SELECT CUSTOMER_ID, PRODUCT_NAME
FROM (
    SELECT 
        C.CUSTOMER_ID, 
        M.PRODUCT_NAME, 
        COUNT(*) AS PURCHASE_COUNT,
        DENSE_RANK() OVER (PARTITION BY C.CUSTOMER_ID ORDER BY COUNT(*) DESC) AS RANKS
    FROM SALES AS C
    JOIN MENU AS M ON C.PRODUCT_ID = M.PRODUCT_ID
    GROUP BY C.CUSTOMER_ID, M.PRODUCT_NAME
) AS RankedProducts
WHERE RANKS = 1;

#IF THERE IS TIE BETWEEN THE NUMBER OF PRODUCTS PURCHASED DENSE_RANK WILL RETURN ALL THE ITEMS

#6. Which item was purchased first by the customer after they became a member?


SELECT S.CUSTOMER_ID, M.PRODUCT_NAME FROM SALES AS S
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID
JOIN 
(
SELECT S.CUSTOMER_ID, MIN(S.ORDER_DATE) AS FIRST_PURCHASE FROM SALES AS S
JOIN MEMBERS AS MB
ON S.CUSTOMER_ID=MB.CUSTOMER_ID
WHERE S.ORDER_DATE>=MB.JOIN_DATE
GROUP BY CUSTOMER_ID)
AS MEMBERSHIP
ON S.CUSTOMER_ID=MEMBERSHIP.CUSTOMER_ID AND S.ORDER_DATE=MEMBERSHIP.FIRST_PURCHASE;

WITH FIRST_PURCHASE_AFTER_MEMBERSHIP AS (
SELECT S.CUSTOMER_ID, MIN(S.ORDER_DATE) AS FIRST_PURCHASE FROM SALES AS S
JOIN MEMBERS AS MB
ON S.CUSTOMER_ID=MB.CUSTOMER_ID
WHERE S.ORDER_DATE>=MB.JOIN_DATE
GROUP BY CUSTOMER_ID
)
SELECT FPAM.CUSTOMER_ID, M.PRODUCT_NAME
FROM FIRST_PURCHASE_AFTER_MEMBERSHIP AS FPAM
JOIN SALES AS S
ON
S.CUSTOMER_ID=FPAM.CUSTOMER_ID AND S.ORDER_DATE=FPAM.FIRST_PURCHASE
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID;

#7. Which item was purchased just before the customer became a member?

SELECT S.CUSTOMER_ID, M.PRODUCT_NAME FROM SALES AS S
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID
JOIN 
(
SELECT S.CUSTOMER_ID, MAX(S.ORDER_DATE) AS LAST_PURCHASE FROM SALES AS S
JOIN MEMBERS AS MB
ON S.CUSTOMER_ID=MB.CUSTOMER_ID
WHERE S.ORDER_DATE<MB.JOIN_DATE
GROUP BY CUSTOMER_ID)
AS MEMBERSHIP
ON S.CUSTOMER_ID=MEMBERSHIP.CUSTOMER_ID AND S.ORDER_DATE=MEMBERSHIP.LAST_PURCHASE;


WITH LAST_PURCHASE_BEFORE_MEMBERSHIP AS (
SELECT S.CUSTOMER_ID, MAX(S.ORDER_DATE) AS LAST_PURCHASE FROM SALES AS S
JOIN MEMBERS AS MB
ON S.CUSTOMER_ID=MB.CUSTOMER_ID
WHERE S.ORDER_DATE<MB.JOIN_DATE
GROUP BY CUSTOMER_ID
)
SELECT LP.CUSTOMER_ID, M.PRODUCT_NAME
FROM LAST_PURCHASE_BEFORE_MEMBERSHIP AS LP
JOIN SALES AS S
ON
S.CUSTOMER_ID=LP.CUSTOMER_ID AND S.ORDER_DATE=LP.LAST_PURCHASE
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID;

SELECT * FROM SALES;
SELECT * FROM MEMBERS;

#8. What is the total items and amount spent for each member before they became a member?

SELECT S.CUSTOMER_ID, COUNT(S.CUSTOMER_ID), SUM(M.PRICE) FROM SALES AS S
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID
JOIN (
SELECT S.CUSTOMER_ID, S.ORDER_DATE AS LAST_PURCHASE FROM SALES AS S
JOIN MEMBERS AS MB
ON S.CUSTOMER_ID=MB.CUSTOMER_ID
WHERE S.ORDER_DATE<MB.JOIN_DATE) AS MBS
ON
S.CUSTOMER_ID=MBS.CUSTOMER_ID AND S.ORDER_DATE=MBS.LAST_PURCHASE
GROUP BY S.CUSTOMER_ID;


SELECT  S.CUSTOMER_ID, COUNT(*), SUM(M.PRICE) FROM SALES AS S
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID
JOIN MEMBERS AS MB
ON S.CUSTOMER_ID=MB.CUSTOMER_ID
WHERE S.ORDER_DATE<MB.JOIN_DATE
GROUP BY S.CUSTOMER_ID;

#9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT S.CUSTOMER_ID, SUM(
CASE 
WHEN M.PRODUCT_NAME="SUSHI" THEN M.PRICE*20
ELSE M.PRICE*10 END) AS TOTAL_POINTS
FROM SALES AS S
JOIN MENU AS M
ON
S.PRODUCT_ID=M.PRODUCT_ID
GROUP BY CUSTOMER_ID;


#10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?*/

SELECT S.CUSTOMER_ID, SUM(
CASE
WHEN S.ORDER_DATE BETWEEN MB.JOIN_DATE AND DATE_ADD(MB.JOIN_DATE, INTERVAL 7 DAY) THEN M.PRICE*20 
ELSE M.PRICE*10
END
) AS TOTAL_POINTS
FROM SALES AS S 
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID
JOIN MEMBERS AS MB
ON S.CUSTOMER_ID=MB.CUSTOMER_ID
WHERE S.ORDER_DATE<="2021-01-31"
GROUP BY S.CUSTOMER_ID
ORDER BY CUSTOMER_ID;



#11. Recreate the table output using the available data

SELECT S.CUSTOMER_ID, S.ORDER_DATE, M.PRODUCT_NAME, M.PRICE,
(CASE
WHEN S.CUSTOMER_ID=MB.CUSTOMER_ID AND S.ORDER_DATE>=MB.JOIN_DATE THEN "Y"
ELSE "N"
END) AS MEMBER
FROM SALES AS S
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID
JOIN MEMBERS AS MB
ON S.CUSTOMER_ID=MB.CUSTOMER_ID
ORDER BY S.CUSTOMER_ID, S.ORDER_DATE;

#12. Rank all the things:
WITH NEW_TABLE AS (SELECT S.CUSTOMER_ID, S.ORDER_DATE, M.PRODUCT_NAME, M.PRICE,
(CASE
WHEN S.CUSTOMER_ID=MB.CUSTOMER_ID AND S.ORDER_DATE>=MB.JOIN_DATE THEN "Y"
ELSE "N"
END) AS MEMBER
FROM SALES AS S
JOIN MENU AS M
ON S.PRODUCT_ID=M.PRODUCT_ID
JOIN MEMBERS AS MB
ON S.CUSTOMER_ID=MB.CUSTOMER_ID
)
SELECT *,
(CASE WHEN MEMBER="N" THEN NULL 
ELSE RANK() OVER(PARTITION BY S.CUSTOMER_ID, MEMBER ORDER BY S.ORDER_DATE) END) AS RANKS
FROM NEW_TABLE
ORDER BY CUSTOMER_ID, ORDER_DATE;


#IF YOU WANT TO RANK IT LIKE "1, 2 ,3 , 4" INSTEAD OF "1,2,3,3" USE ROW_NUMBER() WINDOW FUNCTION


